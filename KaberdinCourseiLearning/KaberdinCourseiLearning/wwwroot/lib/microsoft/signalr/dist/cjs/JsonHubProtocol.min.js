"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var IHubProtocol_1=require("./IHubProtocol"),ILogger_1=require("./ILogger"),ITransport_1=require("./ITransport"),Loggers_1=require("./Loggers"),TextMessageFormat_1=require("./TextMessageFormat"),JSON_HUB_PROTOCOL_NAME="json",JsonHubProtocol=function(){function n(){this.name=JSON_HUB_PROTOCOL_NAME;this.version=1;this.transferFormat=ITransport_1.TransferFormat.Text}return n.prototype.parseMessages=function(n,t){var e,u,r,f,o,i;if(typeof n!="string")throw new Error("Invalid input for JSON hub protocol. Expected a string.");if(!n)return[];for(t===null&&(t=Loggers_1.NullLogger.instance),e=TextMessageFormat_1.TextMessageFormat.parse(n),u=[],r=0,f=e;r<f.length;r++){if(o=f[r],i=JSON.parse(o),typeof i.type!="number")throw new Error("Invalid payload.");switch(i.type){case IHubProtocol_1.MessageType.Invocation:this.isInvocationMessage(i);break;case IHubProtocol_1.MessageType.StreamItem:this.isStreamItemMessage(i);break;case IHubProtocol_1.MessageType.Completion:this.isCompletionMessage(i);break;case IHubProtocol_1.MessageType.Ping:break;case IHubProtocol_1.MessageType.Close:break;default:t.log(ILogger_1.LogLevel.Information,"Unknown message type '"+i.type+"' ignored.");continue}u.push(i)}return u},n.prototype.writeMessage=function(n){return TextMessageFormat_1.TextMessageFormat.write(JSON.stringify(n))},n.prototype.isInvocationMessage=function(n){this.assertNotEmptyString(n.target,"Invalid payload for Invocation message.");n.invocationId!==undefined&&this.assertNotEmptyString(n.invocationId,"Invalid payload for Invocation message.")},n.prototype.isStreamItemMessage=function(n){if(this.assertNotEmptyString(n.invocationId,"Invalid payload for StreamItem message."),n.item===undefined)throw new Error("Invalid payload for StreamItem message.");},n.prototype.isCompletionMessage=function(n){if(n.result&&n.error)throw new Error("Invalid payload for Completion message.");!n.result&&n.error&&this.assertNotEmptyString(n.error,"Invalid payload for Completion message.");this.assertNotEmptyString(n.invocationId,"Invalid payload for Completion message.")},n.prototype.assertNotEmptyString=function(n,t){if(typeof n!="string"||n==="")throw new Error(t);},n}();exports.JsonHubProtocol=JsonHubProtocol;