@page
@model KaberdinCourseiLearning.Pages.AdminPanelModel
@{
    ViewData["Title"] = "AdminPanel";
}

@using Microsoft.AspNetCore.Identity;
@inject UserManager<IdentityUser> UserManager
@inject SignInManager<IdentityUser> SignInManager
@inject RoleManager<IdentityRole> RoleManager

<form name="formTable" method="post">
    <div id="AlertMessage" role="alert">
        
    </div>
    <div id="PleaseWait" class="d-none align-items-center" style="display:none;">
        <strong>Please wait...</strong>
        <div class="spinner-border ml-auto" role="status" aria-hidden="true"></div>
    </div>
    <div class="container-fluid d-flex justify-content-center">
        <div class="container">
            <div style="margin-bottom:16px" class="row justify-content-around">
                <input id="FormActionInput" type="hidden" asp-for="FormAction" />
                <input id="NewRole" type="hidden" asp-for="NewRole" />
                <button type="submit" class="btn btn-outline-primary col-3" onclick="prepareAction(this.value)" value="Block">
                    <i style="margin-right:5px" class="fa fa-ban"></i>Block
                </button>
                <button type="submit" class="btn btn-outline-primary col-3" onclick="prepareAction(this.value)" value="Unblock">
                    <i style="margin-right:5px" class="fa fa-user-check"></i>Unblock
                </button>
                <button type="submit" class="btn btn-outline-primary col-3" onclick="prepareAction(this.value)" value="Delete">
                    <i style="margin-right:5px" class="fa fa-user-slash"></i>Delete
                </button>
            </div>
        </div>
    </div>
    <table class="table table-sm table-hover">
        <thead class="thead-dark">
            <tr class="text-center">
                <th scope="col" class="col-1"><button class="btn-primary font-weight-bold rounded" OnClick="return toggleClick()">Toggle</button></th>
                <th scope="col">Name</th>
                <th scope="col">Email</th>
                <th scope="col" class="col-3">Role</th>
                <th scope="col">Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Model.Users)
            {
                var Style = Html.Raw("");
                if (user.Id == Model.CurrentUser.Id)
                {
                    Style = Html.Raw("font-weight-bold");
                }
                var userRoles = await UserManager.GetRolesAsync(user);
                <tr class="@Style text-center">
                    <td class="align-middle text-center"><input type="checkbox" name="Selected" value="@user.Id" /></td>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>
                        <select class="form-control" name="SelectedRole" id="@user.Id" onchange="return roleChanged(this)">
                            @foreach (var role in Model.Roles)
                            {
                                if (userRoles.Contains(role.Name))
                                {
                                    <option selected>@role.Name</option>
                                }
                                else
                                {
                                    <option>@role.Name</option>
                                }
                            }
                            @{
                                if (userRoles.Count == 0)
                                {
                                    <option selected>User</option>
                                }
                                else
                                {
                                    <option>User</option>
                                }
                            }
                        </select>
                    </td>
                    @if (user.LockoutEnd > DateTime.Now)
                    {
                        <td>Banned</td>
                    }
                    else
                    {
                        <td>Active</td>
                    }
                </tr>
            }
        </tbody>
    </table>
</form>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script>
    var toggle = true;
    var alert = $("#AlertMessage");
    var queryString = window.location.search;
    var urlParams = new URLSearchParams(queryString);
    checkParams();
    function checkParams() {
        let resultIsSuccess = urlParams.get('resultIsSuccess');
        if (resultIsSuccess != undefined) {
            if (resultIsSuccess) success(); else failed();
        }
    }
    function roleChanged(e) {
        prepareAction("Role");
        let changedUserId = $(e).attr("id");
        prepareSelection(changedUserId)
        let newRole = $(e).val();
        prepareRole(newRole);
        $("form").submit();
    }
    function prepareAction(action) {
        let hiddenFormAction = $("#FormActionInput");
        hiddenFormAction.val(action);
        startWaiting();
    }
    function prepareSelection(changedUserId) {
        let checkboxes = $("[name='Selected']");
        checkboxes.each(function () {
            if ($(this).val() == changedUserId) {
                $(this).attr("checked", true);
            } else {
                $(this).attr("checked", false);
            }
        })
    }
    function prepareRole(newRole) {
        let hiddenNewRole = $("#NewRole");
        hiddenNewRole.val(newRole);
    }
    function startWaiting() {
        let waitIcon = $("#PleaseWait");
        waitIcon.removeClass("d-none");
        waitIcon.addClass("d-flex");
    }
    function toggleClick() {
        var checkboxes = $("[name='Selected']");
        checkboxes.each(function () {
            $(this).attr("checked", toggle);
        })
        toggle = !toggle;
        return false
    }
    function showAlert() {
        alert.addClass("alert");
        alert.show();
    }
    function success() {
        alert.addClass("alert-success");
        alert.text("Action completed successfully.");
        showAlert();
    }
    function failed() {
        alert.addClass("alert-danger");
        let errorMessage = urlParams.get('errorMessage');
        alert.text("Action failed to complete." + errorMessage);
        showAlert();
    }
</script>



